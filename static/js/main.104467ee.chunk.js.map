{"version":3,"sources":["components/Input.js","components/List.js","components/App.js","serviceWorker.js","reducers/listReducer.js","reducers/inputReducer.js","store.js","index.js"],"names":["Input","className","type","onChange","e","props","changeInput","onClick","addItem","inputReducer","Component","connect","dispatch","val","newText","target","value","List","this","listReducer","map","item","i","key","completeItem","name","deleteList","style","textDecoration","App","Boolean","window","location","hostname","match","list","action","deltetedItem","splice","completedItem","concat","state","store","createStore","combineReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.104467ee.chunk.js","sourcesContent":["import { connect } from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nclass Input extends Component {\r\n    render() {\r\n\r\n        return (<div>\r\n            <div className=\"to-do-app\">\r\n                <span className=\"to-do\">To-Do App!</span>\r\n                <span className=\"new-element\">Add New To-Do</span>\r\n                <input type=\"text\" className=\"enter-task\" onChange={(e) => this.props.changeInput(e)}></input>\r\n                <span className=\"add-btn\" onClick={() => this.props.addItem(this.props.inputReducer)} >Add </span>\r\n            </div>\r\n        </div>)\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addItem: (val) => {\r\n            dispatch({ type: 'ADD-LIST', newText: val })\r\n\r\n        },\r\n\r\n        changeInput: (e) => {\r\n            dispatch({ type: \"CHANGE-INPUT\", val: e.target.value })\r\n\r\n        },\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ inputReducer }) => {\r\n    return {\r\n\r\n        inputReducer: inputReducer,\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Input)","import { connect } from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nclass List extends Component {\r\n\r\n    render() {\r\n        return (<div>\r\n\r\n            <div className=\"items_list\">\r\n                {this.props.listReducer.map((item, i) => <div key={i} className=\"elt\">\r\n\r\n                    <span className=\"compeleteBtn\" onClick={() => this.props.completeItem(i)} >{item.name}</span>\r\n                    <span className=\"deleteBtn\" onClick={() => this.props.deleteList(i)}>Delete</span>\r\n                    <span className=\"theInput\" style={{ textDecoration: (item.name === \"compelete\") ? 'none' : 'line-through' }}  >{item.val}</span>\r\n\r\n                </div>)}\r\n            </div>\r\n        </div>)\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteList: (i) => {\r\n            dispatch({ type: 'DELETE-LIST', i })\r\n        },\r\n\r\n        completeItem: (i) => {\r\n            dispatch({ type: 'COMPLETE-LIST', i })\r\n\r\n        },\r\n\r\n        addItem: (val) => {\r\n            dispatch({ type: 'ADD-LIST', newText: val })\r\n\r\n        },\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ listReducer, inputReducer }) => {\r\n    return {\r\n        listReducer: listReducer,\r\n        inputReducer: inputReducer,\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List)","\nimport React, { Component } from 'react';\nimport './style.css';\nimport Input from './Input';\nimport List from './List';\nclass App extends Component {\n\n\n\n\n  render() {\n\n    return (<div>\n\n      <Input />\n      <div className=\"get-work-done\">\n        <span className=\"get-work-done\">Let's get some work done!</span>\n        <hr className=\"ligne\"></hr>\n        <div className=\"tasks\">\n          <List />\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst listReducer = (list = [{ \"val\": \"exemple\", \"txt\": \"none\", \"name\": \"compelete\" },\r\n{ \"val\": \"exemple2\", \"txt\": \"none\", \"name\": \"compelete\" }\r\n], action) => {\r\n    switch (action.type) {\r\n        case 'DELETE-LIST':\r\n\r\n            let deltetedItem = [...list];\r\n            deltetedItem.splice(action.i, 1);\r\n            return deltetedItem\r\n\r\n        case 'COMPLETE-LIST':\r\n\r\n            let completedItem = [...list];\r\n            completedItem.map((item, i) => (i === action.i) ? item.name = \"undo\" : item.name);\r\n\r\n            return completedItem\r\n\r\n        case 'ADD-LIST':\r\n\r\n            let addItem = [...list];\r\n            addItem = addItem.concat([{ \"val\": action.newText, \"txt\": \"none\", \"name\": \"compelete\" }])\r\n            return addItem\r\n\r\n\r\n\r\n        default:\r\n            return list\r\n    }\r\n}\r\nexport default listReducer;\r\n\r\n\r\n","const inputReducer = (state = \"\", action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE-INPUT\":\r\n            return action.val\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport default inputReducer;","import { createStore, combineReducers } from \"redux\";\r\nimport listReducer from './reducers/listReducer';\r\nimport inputReducer from './reducers/inputReducer';\r\n\r\n\r\n\r\nconst store = createStore(combineReducers({\r\n    listReducer: listReducer,\r\n    inputReducer: inputReducer,\r\n\r\n})\r\n)\r\nexport default store;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from \"./store\";\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}